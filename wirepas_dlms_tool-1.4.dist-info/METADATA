Metadata-Version: 2.1
Name: wirepas-dlms-tool
Version: 1.4
Summary: Tool to validate the integration of Wirepas dlms app
Author: Wirepas Ltd
Author-email: opensource@wirepas.com
License: Apache-2
Keywords: Wirepas DLMS HES testing meters
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Topic :: Software Development :: Libraries
Classifier: Programming Language :: Python :: 3
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: gurux-dlms==1.0.143
Requires-Dist: wirepas-mqtt-library==1.2.6

# Wirepas DLMS tool

This repository contains tools to validate the integration of Wirepas dlms app.


## Wirepas DLMS Tool library

The purpose of the [Wirepas DLMS Integration Tool Python library](https://github.com/wirepas/dlms-integration-tool/tree/main/wirepas_dlms_tool) is to provide tools to validate the DLMS app and the meter compatibility. It is not designed to be used as a HES.<br>
It works as an interface to both the Gurux Python library (to read DLMS/COSEM compatible meters) and the Wirepas MQTT library, and including the specifications of the DLMS app environment.


## Installation

### Install from the source

This library can be install locally from source directly with the following command:

`pip install -e .`

Execute the following command to install the library from the wheel:

`pip install <path of the wheel>.whl`


## Main principles

The library contains modules to abstract the meters and their NIC in a Wirepas network in order to listen to their traffic and to exchange messages with them from a HES perspective:

![Wirepas DLMS tool library overview](images/dlms_tool_overview.png)


In fact, the DLMSNetworkInterface class provides a network interface to communicate with the NIC through the NIC server or directly with the meters in pass-through inside a Wirepas network.
Especially, it redirects the messages from gateways to the corresponding abstract meter objects representing the physical meters with their NIC.
Futhermore, it also updates locally their network informations (gateway and sink ids) when receiving a message so that meters are always up-to-date.

These meters objects provides methods to do on-demand requests.
They manage the meters configurations and, especially, it handles the ciphering settings that are used to encrypt/decrypt messages exchanged with a meter in all association modes.

When a DLMS message is received from the physical meter, the message is either:
* An unencrypted NIC status word message asserting a sink route change or a provisioning request.
* An encrypted data notification.
* A response to a request.
* Something that couldn't be parsed for various reasons (wrong credentials, malformed DLMS packets, ...).

And, in both cases, the message is returned in a different function called by the associated meter object, in order to separate the use cases of the user.


## Examples

Example of an on-demand request to a meter:
```
# Use for connection to the MQTT.
wni = WirepasNetworkInterface(<mqtt informations>)

# Our network interface to communication with meters.
dni = DLMSNetworkInterface(wni)

# Creation of a meter object.
my_meter_configuration = MeterConfiguration()  # Check MeterConfiguration class to see the arguments to input.
my_meter = dni.create_meter(node_id=12345678, meter_configuration=my_meter_configuration,
                            gateway="my_gw", sink="my_sink")

# Get meter response of a get device ID request in pass-through in US association.
response = my_meter.get_meter_device_ID(AssociationLevelEnum.US_ASSOCIATION)

# Verification of the correctness of the response with the error code.
assert response.error_code == ErrorCodeEnum.RES_OK

# We can print the response message as a xml string and also its device ID we requested.
print(response.xml)
print(f"The device ID of the meter is {response.value}")
```

Example of listening to unknown meters for its notifications:
```
# Function to be used when receiving a notification from meters.
def default_notification_cb(meter, notification):
    print(f"A notification has been received from {meter.node_id}:")
    print(notification.xml)

# Function to be used when a message could not be parsed.
def unparsed_cb(meter, payload: bytes):
    print(f"An unknown DLMS message has been received from {meter.node_id} "
          f"in {meter.gateway_id}/{meter.sink_id}.")

# Use for connection to the MQTT.
wni = WirepasNetworkInterface(<mqtt informations>)

# Our network interface to communication with meters.
dni = DLMSNetworkInterface(wni, default_notification_cb=default_notification_cb,
                           default_unparsed_cb=unparsed_cb)

# Creation of a meter objects that handles the real meter messages.
my_meter_configuration = MeterConfiguration()  # Check MeterConfiguration class to see the arguments to input.
dni.create_meter(node_id=12345678, meter_configuration=my_meter_configuration,
                 gateway="my_gw", sink="my_sink")
```


License
-------

Licensed under the Apache License, Version 2.0.
